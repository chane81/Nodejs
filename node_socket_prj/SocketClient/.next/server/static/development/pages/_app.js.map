{"version":3,"file":"static\\development\\pages\\_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./config.js","webpack:///./pages/_app.js","webpack:///./stores/messageStore.js","webpack:///./stores/socketStore.js","webpack:///./stores/store.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"mobx\"","webpack:///external \"mobx-react\"","webpack:///external \"mobx-state-tree\"","webpack:///external \"next/app\"","webpack:///external \"next/head\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"socket.io-client\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const env = process.env.NODE_ENV || 'development'; // 'development' or 'production'\r\n\r\nconst development = {\r\n\tsocketServerHost: \"http://localhost:5000\"\r\n}\r\n\r\nconst production = {\r\n\tsocketServerHost: \"https://socket-server-node.herokuapp.com\"\r\n}\r\n\r\nconst config = {\r\n\tdevelopment,\r\n\tproduction\r\n};\r\n\r\nmodule.exports = config[env];","import App, {Container} from 'next/app';\r\nimport { Provider } from 'mobx-react'\r\nimport { getSnapshot } from 'mobx-state-tree'\r\nimport Head from 'next/head';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { initializeStore } from '../stores/store';\r\n\r\nexport default class MyApp extends App {\r\n  static async getInitialProps ({ Component, router, ctx }) {\r\n    let pageProps = {}\r\n    const isServer = typeof window === 'undefined'\r\n    const store = initializeStore(isServer)\r\n\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx)\r\n    }\r\n\r\n    return {\r\n      initialState: getSnapshot(store),\r\n      isServer,\r\n      pageProps\r\n    }\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.store = initializeStore(props.isServer, props.initialState)\r\n  }\r\n\r\n  // IE10 대응\r\n  static childContextTypes = {\r\n    router: PropTypes.object,\r\n  };\r\n\r\n  // IE10 대응\r\n  getChildContext() {\r\n    const { router } = this.props;\r\n    return { router };\r\n  }\r\n\r\n  render () {\r\n    const {Component, pageProps} = this.props\r\n\r\n    return (\r\n      <Provider store={this.store}>\r\n        <Container>\r\n            <Head>\r\n              <title></title>\r\n            </Head>\r\n            <Component {...pageProps} />\r\n        </Container>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\n","import { types } from 'mobx-state-tree'\r\n\r\n// 채팅 메시지 모델 - 채팅메시지(message), 메시지를 보낸 닉네임(nickname), 내가 보낸 메시지 인지여부(isSelf) 가 들어감\r\nconst model = types\r\n  .model('messageModel', {\r\n    message: types.string,\r\n    nickName: types.string,\r\n    nickId: types.string,\r\n    isSelf: types.boolean\r\n  });\r\n\r\n\r\nconst defaultValue = {\r\n  message: '',\r\n  nickName: '',\r\n  nickId: '',\r\n  isSelf: false\r\n};\r\n\r\n\r\nconst create = model.create(defaultValue);\r\n\r\n\r\nconst messageStore = {\r\n  model,\r\n  defaultValue,\r\n  create\r\n};\r\n\r\n\r\nexport default messageStore;\r\n  \r\n\r\n","import { types, applySnapshot } from 'mobx-state-tree'\r\nimport messageStore from './messageStore'\r\nimport { flow } from 'mobx';\r\nimport io from 'socket.io-client'\r\nimport config from '../config.js';\r\n\r\n\r\nconst model = types\r\n  .model('socketModel', {\r\n    socket: types.frozen(),\r\n    socketName: types.string,\r\n    currentNickName: types.string,\r\n    currentNickId: types.string,\r\n    currentMessage: messageStore.model,\r\n    messages: types.array(messageStore.model),\r\n    modalVisible: types.boolean\r\n  })\r\n  .actions(self => ({\r\n    // 접속 소켓을 상태값에 넣어주기\r\n    setSocket(socket) {\r\n      self.socket = socket;\r\n    },\r\n    // 소켓 커넥션과 이벤트등록\r\n    setSocketConnect() {\r\n      if (self.socket == null) {\r\n        const socket = io(config.socketServerHost, {\r\n          transports: ['websocket', 'polling'],\r\n          query: {\r\n            socketName: \"테스트\"\r\n          },\r\n          secure: true\r\n        });\r\n\r\n        // 접속한 소켓 set\r\n        socket.on(\"connect\", () => {\r\n          self.setSocket(socket);\r\n        });\r\n\r\n        socket.on('client.msg.receive', context => {\r\n          console.log('받은메시지:', context);\r\n\r\n          const receiveMsg = JSON.parse(context);\r\n\r\n          // 메시지들 배열에 push\r\n          self.setMessagesPush({ ...receiveMsg, isSelf: false });\r\n        });\r\n\r\n        socket.on('connect_error', function(err) {\r\n          console.log('socket error');\r\n        });\r\n    \r\n        socket.on(\"disconnect\", () => {\r\n          console.log('서버 disconnected!');\r\n        });\r\n      }\r\n    },\r\n    // 주고 받은 메시지들 push\r\n    setMessagesPush(messageModel) {\r\n\r\n      console.log('메시지 push:', JSON.stringify(messageModel))\r\n\r\n      self.messages.push({...messageModel});\r\n    },\r\n    // 현재 접속한 유저의 닉네임 set\r\n    setCurrentNickName(currentNickName) {\r\n      self.currentNickName = currentNickName;\r\n    },\r\n    // 현재 접속한 유저가 보낼려는 메시지 set\r\n    setCurrentMessage(message) {\r\n      self.currentMessage = {\r\n        message,\r\n        nickName: self.currentNickName,\r\n        nickId: self.currentNickId,\r\n        isSelf: true\r\n      };\r\n    },\r\n    // 소켓 close\r\n    setSocketClose() {\r\n      if (self.socket != null) {\r\n        self.socket.close();\r\n      }\r\n    },\r\n    // 소켓 send\r\n    setSendMessage: flow(function* () {\r\n\r\n      if (self.socket === null || self.socket.connected == false) {\r\n        alert('서버에 연결되어 있지 않습니다.');\r\n\r\n      }\r\n      else if (self.currentMessage.message.trim() === \"\") {\r\n        alert('메시지를 입력해주세요!');\r\n\r\n      } else {\r\n        console.log(self.socket);\r\n        // 소켓 emit\r\n        yield self.socket.emit('client.msg.send', JSON.stringify(self.currentMessage));\r\n\r\n        console.log('소켓send:', self.socket);\r\n\r\n        // 메시지들 배열에 push\r\n        self.setMessagesPush(self.currentMessage);\r\n      }\r\n\r\n      // input 박스 메시지 초기화\r\n      self.setCurrentMessage('');\r\n    }),\r\n    // 모달 visible 세팅\r\n    setModalVisible(isVisible) {\r\n      self.modalVisible = false;\r\n    },\r\n    // 현재사용자의 임시ID\r\n    setCurrentNickId() {\r\n      self.currentNickId = Math.floor((Math.random() * 50)).toString();\r\n    }\r\n  }))\r\n  .views(self => ({\r\n    // 모달을 보여줘야할지 여부\r\n    get getModalVisible() {\r\n      return self.currentNickName ? false : true;\r\n    },\r\n    get getSocket() {\r\n      return self.socket;\r\n    }\r\n  }));\r\n\r\n\r\nconst defaultValue = {\r\n  socket: null,\r\n  socketName: '',\r\n  currentNickName: '',\r\n  currentMessage: {\r\n    ...messageStore.defaultValue\r\n  },\r\n  currentNickId: '',\r\n  messages: [],\r\n  modalVisible: false\r\n};\r\n\r\n\r\nconst create = model.create(defaultValue);\r\n\r\n\r\nconst socketStore = {\r\n  model,\r\n  defaultValue,\r\n  create\r\n};\r\n\r\n\r\nexport default socketStore;","import { types, applySnapshot } from 'mobx-state-tree'\r\nimport socketStore from './socketStore'\r\nimport { flow } from 'mobx';\r\nimport io from 'socket.io-client'\r\nimport config from '../config.js';\r\n\r\nlet _store = null;\r\n\r\n\r\nconst store = types\r\n  .model('store', {\r\n    socketModel: socketStore.model,\r\n  });\r\n\r\n\r\nexport function initializeStore (isServer, snapshot = null) {\r\n  const defaultValue = {\r\n    socketModel: {...socketStore.defaultValue}\r\n  };\r\n\r\n  // 서버일 경우에 대한 로직 작성\r\n  if (isServer) {\r\n    _store = store.create(defaultValue);\r\n  }\r\n\r\n  // 클라이언트일 경우에 대한 로직 작성\r\n  if (store === null) {\r\n    _store = store.create(defaultValue);\r\n  }\r\n\r\n  // 스냅샷 있을 경우 스토어에 스냅샷을 적용\r\n  if (snapshot) {\r\n    applySnapshot(_store, snapshot)\r\n  }\r\n\r\n  return _store\r\n}\r\n  ","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"mobx\");","module.exports = require(\"mobx-react\");","module.exports = require(\"mobx-state-tree\");","module.exports = require(\"next/app\");","module.exports = require(\"next/head\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"socket.io-client\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AACA;;;AAKA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA9CA;AACA;AADA;AAwBA;AADA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAGA;AACA;AACA;AACA;AAHA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAPA;AAAA;AACA;AADA;AAUA;AACA;AAXA;AAYA;AACA;AAbA;AAcA;AACA;AAEA;AACA;AAlBA;AAoBA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhGA;AAAA;AAkGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AATA;AAaA;AAGA;AACA;AACA;AACA;AAHA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AADA;AAKA;AAAA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACpCA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}